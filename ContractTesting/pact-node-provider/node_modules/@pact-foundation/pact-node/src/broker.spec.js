"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var logger_1 = require("./logger");
var broker_mock_1 = require("../test/integration/broker-mock");
var broker_1 = require("./broker");
var expect = chai.expect;
chai.use(chaiAsPromised);
describe("Broker Spec", function () {
    var server;
    var PORT = Math.floor(Math.random() * 999) + 9000;
    var pactBrokerBaseUrl = "http://localhost:" + PORT;
    before(function () { return broker_mock_1.default(PORT).then(function (s) {
        logger_1.default.debug("Pact Broker Mock listening on port: " + PORT);
        server = s;
    }); });
    after(function () { return server.close(); });
    describe("Broker", function () {
        context("when not given a Pact Broker URL", function () {
            it("should fail with an error", function () {
                expect(function () { return broker_1.default({
                    provider: "foobar"
                }); }).to.throw(Error);
            });
        });
        context("when not given a Provider name", function () {
            it("should fail with an error", function () {
                expect(function () {
                    broker_1.default({
                        brokerUrl: "http://test.pact.dius.com.au"
                    });
                }).to.throw(Error);
            });
        });
        context("when given a valid Pact Broker URL", function () {
            it("should return a Broker object", function () {
                expect(function () { return broker_1.default({
                    brokerUrl: "http://test.pact.dius.com.au",
                    provider: "foobar"
                }); }).to.not.throw(Error);
            });
        });
    });
    describe("Find Consumers", function () {
        context("when provider 'notfound' does not exist", function () {
            context("and given the provider name 'notfound'", function () {
                it("should fail with an Error", function () {
                    return expect(broker_1.default({
                        brokerUrl: pactBrokerBaseUrl,
                        provider: "notfound"
                    }).findConsumers()).to.eventually.be.rejected;
                });
            });
        });
        context("when no pacts exist for provider 'nolinks'", function () {
            context("and given the provider name", function () {
                it("should return an empty array of pact links", function () {
                    return expect(broker_1.default({
                        brokerUrl: pactBrokerBaseUrl,
                        provider: "nolinks"
                    }).findConsumers()).to.eventually.eql([]);
                });
            });
        });
        context("When pacts exist for provider 'they'", function () {
            context("and given the provider name and tags", function () {
                it("should find pacts from all known consumers of the provider given any of the tags", function () {
                    return expect(broker_1.default({
                        brokerUrl: pactBrokerBaseUrl,
                        provider: "they",
                        tags: ["prod"]
                    }).findConsumers()).to.eventually.have.lengthOf(2);
                });
            });
            context("and given the provider name without tags", function () {
                it("should find pacts from all known consumers of the provider", function () {
                    return expect(broker_1.default({
                        brokerUrl: pactBrokerBaseUrl,
                        provider: "they"
                    }).findConsumers()).to.eventually.have.lengthOf(2);
                });
            });
        });
    });
});
//# sourceMappingURL=broker.spec.js.map