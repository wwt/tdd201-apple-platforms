"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var can_deploy_1 = require("./can-deploy");
var logger_1 = require("./logger");
var broker_mock_1 = require("../test/integration/broker-mock");
var rimraf = require("rimraf");
var mkdirp = require("mkdirp");
var expect = chai.expect;
chai.use(chaiAsPromised);
describe("CanDeploy Spec", function () {
    var PORT = Math.floor(Math.random() * 999) + 9000;
    var server;
    var absolutePath;
    var relativePath;
    before(function () { return broker_mock_1.default(PORT).then(function (s) {
        logger_1.default.debug("Pact Broker Mock listening on port: " + PORT);
        server = s;
    }); });
    after(function () { return server.close(); });
    beforeEach(function () {
        relativePath = ".tmp/" + Math.floor(Math.random() * 1000);
        absolutePath = path.resolve(__dirname, "..", relativePath);
        mkdirp.sync(absolutePath);
    });
    afterEach(function () {
        if (fs.existsSync(absolutePath)) {
            rimraf.sync(absolutePath);
        }
    });
    describe("convertForSpawnBinary helper function", function () {
        var result;
        beforeEach(function () {
            result = can_deploy_1.CanDeploy.convertForSpawnBinary({
                pacticipant: ["one", "two"],
                pacticipantVersion: ["v1", "v2"],
                pactBroker: "some broker",
                pactBrokerUsername: "username",
                pactBrokerPassword: "password",
            });
        });
        it("produces an array of SpawnArguments", function () {
            expect(result).to.be.an("array");
        });
        it("has version and pacticipant in the right order", function () {
            expect(result).to.eql([
                { pacticipant: "one" },
                { pacticipantVersion: "v1" },
                { pacticipant: "two" },
                { pacticipantVersion: "v2" },
                {
                    pactBroker: "some broker",
                    pactBrokerUsername: "username",
                    pactBrokerPassword: "password",
                }
            ]);
        });
    });
    context("when invalid options are set", function () {
        it("should fail with an Error when not given pactBroker", function () {
            expect(function () {
                can_deploy_1.default({});
            }).to.throw(Error);
        });
        it("should fail with an Error when not given pacticipant", function () {
            expect(function () {
                can_deploy_1.default({
                    pactBroker: "http://localhost",
                    pacticipantVersion: ["v1"],
                });
            }).to.throw(Error);
        });
        it("should fail with an Error when not given version", function () {
            expect(function () {
                can_deploy_1.default({
                    pactBroker: "http://localhost",
                    pacticipant: ["p1", "p2"]
                });
            }).to.throw(Error);
        });
        it("should fail with an error when not given equal numbers of version and pacticipant", function () {
            expect(function () {
                can_deploy_1.default({
                    pactBroker: "http://localhost",
                    pacticipantVersion: ["v1"],
                    pacticipant: ["p1", "p2"]
                });
            }).to.throw(Error);
        });
        it("should fail with an error when version and paticipants are empty", function () {
            expect(function () {
                can_deploy_1.default({
                    pactBroker: "http://localhost",
                    pacticipantVersion: [],
                    pacticipant: []
                });
            }).to.throw(Error);
        });
    });
    context("when valid options are set", function () {
        it("should return a CanDeploy object when given the correct arguments", function () {
            var c = can_deploy_1.default({
                pactBroker: "http://localhost",
                pacticipantVersion: ["v1", "v2"],
                pacticipant: ["p1", "p2"]
            });
            expect(c).to.be.ok;
            expect(c.canDeploy).to.be.a("function");
        });
    });
});
//# sourceMappingURL=can-deploy.spec.js.map