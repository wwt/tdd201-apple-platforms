"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var q = require("q");
var logger_1 = require("./logger");
var util_1 = require("util");
var _ = require("underscore");
var checkTypes = require("check-types");
var request = q.denodeify(require("request"));
var Broker = (function () {
    function Broker(options) {
        options = options || {};
        options.tags = options.tags || [];
        checkTypes.assert.nonEmptyString(options.brokerUrl);
        checkTypes.assert.nonEmptyString(options.provider);
        if (options.tags) {
            checkTypes.assert.array.of.string(options.tags);
        }
        if (options.username) {
            checkTypes.assert.string(options.username);
        }
        if (options.password) {
            checkTypes.assert.string(options.password);
        }
        this.options = options;
    }
    Broker.prototype.findPacts = function (tag) {
        var _this = this;
        logger_1.default.debug("finding pacts for Provider: " + this.options.provider + " Tag: " + tag);
        var requestOptions = {
            uri: this.options.brokerUrl,
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
            "auth": this.options.username && this.options.password ? {
                "user": this.options.username,
                "password": this.options.password
            } : null
        };
        return request(requestOptions)
            .then(function (data) { return data[0]; })
            .then(function (response) {
            if (response.statusCode < 200 && response.statusCode >= 300) {
                return q.reject(response);
            }
            var body = JSON.parse(response.body);
            return request(_.extend({}, requestOptions, {
                uri: body._links["pb:latest-provider-pacts" + (tag ? "-with-tag" : "")].href.replace("{tag}", tag).replace("{provider}", _this.options.provider)
            }));
        })
            .then(function (data) { return data[0]; })
            .then(function (response) { return response.statusCode < 200 && response.statusCode >= 300 ? q.reject(response) : JSON.parse(response.body); });
    };
    Broker.prototype.findConsumers = function () {
        var _this = this;
        logger_1.default.debug("Finding consumers");
        var promises = _.isEmpty(this.options.tags) ? [this.findPacts()] : _.map(this.options.tags, function (t) { return _this.findPacts(t); });
        return q.all(promises)
            .then(function (values) { return _.reduce(values, function (array, v) {
            if (v && v._links && v._links.pacts) {
                array.push.apply(array, _.pluck(v._links.pacts, "href"));
            }
            return array;
        }, []); })
            .catch(function () { return q.reject("Unable to find pacts for given provider '" + _this.options.provider + "' and tags '" + _this.options.tags + "'"); });
    };
    Broker.create = util_1.deprecate(function (options) { return new Broker(options); }, "Create function will be removed in future release, please use the default export function or use `new Broker()`");
    return Broker;
}());
exports.Broker = Broker;
exports.default = (function (options) { return new Broker(options); });
//# sourceMappingURL=broker.js.map