"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var chai = require("chai");
var expect = chai.expect;
describe("Install", function () {
    var packageBasePath = path.resolve(__dirname, "../..");
    var packagePath = path.resolve(packageBasePath, "package.json");
    beforeEach(function () {
        for (var key in require.cache) {
            delete require.cache[key];
        }
    });
    function createConfig() {
        return require("./install").createConfig();
    }
    describe("Package.json Configuration", function () {
        var packageConfig;
        beforeEach(function () { return packageConfig = JSON.parse(JSON.stringify(require("../package.json"))); });
        afterEach(function () {
            if (fs.existsSync(packagePath)) {
                fs.unlinkSync(packagePath);
            }
        });
        describe("Binary Location", function () {
            function setBinaryLocation(location, expectation) {
                packageConfig.config = {
                    pact_binary_location: location
                };
                fs.writeFileSync(packagePath, JSON.stringify(packageConfig));
                var config = createConfig();
                config.binaries.forEach(function (entry) {
                    expect(entry.downloadLocation).to.be.equal(expectation || location);
                });
            }
            it("Should be able to set binary location as an absolute path", function () { return setBinaryLocation("/some-location/or-other", path.resolve("/some-location/or-other")); });
            it("Should be able to set binary location as an relative path", function () {
                var location = "some-location/or-other";
                setBinaryLocation(location, path.resolve(packageBasePath, location));
            });
            it("Should be able to set binary location as an HTTP URL", function () { return setBinaryLocation("http://some.url"); });
            it("Should be able to set binary location as an HTTPS URL", function () { return setBinaryLocation("https://some.url"); });
        });
        it("Should be able to set 'do not track' from package.json config", function () {
            var doNotTrack = true;
            packageConfig.config = {
                pact_do_not_track: doNotTrack
            };
            fs.writeFileSync(packagePath, JSON.stringify(packageConfig));
            var config = createConfig();
            expect(config.doNotTrack).to.be.equal(doNotTrack);
        });
    });
    describe("Environment variables configuration", function () {
        it("Should be able to set 'do not track' from environment variable 'PACT_DO_NOT_TRACK'", function () {
            var doNotTrack = true;
            process.env.PACT_DO_NOT_TRACK = "" + doNotTrack;
            var config = createConfig();
            expect(config.doNotTrack).to.be.equal(doNotTrack);
        });
    });
});
//# sourceMappingURL=install.spec.js.map